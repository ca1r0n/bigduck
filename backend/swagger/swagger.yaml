openapi: 3.0.0
info:
  title: backend api
  description: backend api
  version: 1.0.0
paths:
  /api/v1/auth/login:
    post:
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: success login, set auth cookies
          headers:
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/auth/register:
    post:
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
                - email
                - username
                - first_name
                - second_name
              properties:
                login:
                  type: string
                password:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                  format: email
                username:
                  type: string
                first_name:
                  type: string
                second_name:
                  type: string
                avatar_url:
                  type: string
                day_of_birth:
                  type: string
                  format: date
                gender:
                  type: string
      responses:
        204:
          description: success register, not set auth cookies
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/auth/refresh:
    post:
      tags:
        - auth
      responses:
        204:
          description: success refresh cookies
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/user/{id_user}:
    put:
      tags:
        - user
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                first_name:
                  type: string
                second_name:
                  type: string
                avatar_url:
                  type: string
                  format: url
                day_of_birth:
                  type: string
                  format: date
                gender:
                  type: string
      responses:
        204:
          description: success update user
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - user
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
      responses:
        204:
          description: success get user
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/user/{id_user}/quiz:
    get:
      tags:
        - quiz
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: page
          in: query
          schema:
            type: number
        - name: order
          in: query
          schema:
            type: object
            properties:
              date_modify:
                type: string
                enum: [ASC, DESC]
              name:
                type: string
                enum: [ASC, DESC]
              title:
                type: string
                enum: [ASC, DESC]
              description:
                type: string
                enum: [ASC, DESC]
              ttl:
                type: string
                enum: [ASC, DESC]
        - name: description
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: title
          in: query
          schema:
            type: string
        - name: is_show
          in: query
          schema:
            type: boolean
        - name: is_strict
          in: query
          schema:
            type: boolean
        - name: is_random
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: success get quizzes
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  quizzes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Quiz'

        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - quiz
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name, title]
              properties:
                name:
                  type: string
                title:
                  type: string
                description:
                  type: string
                intro_url:
                  type: string
                ttl:
                  type: string
                tts:
                  type: string
                tte:
                  type: string
                is_show:
                  type: string
                is_strict:
                  type: string
                is_random:
                  type: string
      responses:
        200:
          description: success create quiz
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number

        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/user/{id_user}/quiz/{id_quiz}:
    get:
      tags:
        - quiz
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: id_quiz
          in: path
          schema:
            type: number
          required: true
      responses:
        200:
          description: success get quiz
          content:
            application/json:
              schema:
                type: object
                properties:
                  quiz:
                    $ref: '#/components/schemas/Quiz'
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - quiz
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: id_quiz
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                title:
                  type: string
                description:
                  type: string
                intro_url:
                  type: string
                ttl:
                  type: string
                tts:
                  type: string
                  format: date
                tte:
                  type: string
                  format: date
                is_show:
                  type: boolean
                is_strict:
                  type: boolean
                is_random:
                  type: boolean
      responses:
        204:
          description: success update quiz
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
        - quiz
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: id_quiz
          in: path
          schema:
            type: number
          required: true
      responses:
        204:
          description: success delete quiz
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/user/{id_user}/quiz/{id_quiz}/question:
    get:
      tags:
        - question
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: id_quiz
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: page
          in: query
          schema:
            type: number
        - name: order
          in: query
          schema:
            type: object
            properties:
              date_modify:
                type: string
                enum: [ ASC, DESC ]
              title:
                type: string
                enum: [ ASC, DESC ]
              is_show:
                type: string
                enum: [ ASC, DESC ]
        - name: type
          in: query
          schema:
            type: string
        - name: title
          in: query
          schema:
            type: string
        - name: data
          in: query
          schema:
            type: string
        - name: is_show
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: success get questions of quiz
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'

        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - question
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: id_quiz
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                type:
                  $ref: '#/components/schemas/QuestionType'
                data:
                  $ref: '#/components/schemas/QuestionData'
                is_show:
                  type: boolean
      responses:
        200:
          description: success crete question
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number

        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/user/{id_user}/quiz/{id_quiz}/question/{id_question}:
    get:
      tags:
        - question
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: id_quiz
          in: path
          schema:
            type: number
          required: true
        - name: id_question
          in: path
          schema:
            type: number
          required: true

      responses:
        200:
          description: success get one question by id
          content:
            application/json:
              schema:
                type: object
                properties:
                  question:
                    $ref: '#/components/schemas/Question'
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - question
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: id_quiz
          in: path
          schema:
            type: number
          required: true
        - name: id_question
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                type:
                  $ref: "#/components/schemas/QuestionType"
                data:
                  $ref: '#/components/schemas/QuestionData'
                is_show:
                  type: boolean
      responses:
        204:
          description: success update by id
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
        - question
      parameters:
        - name: id_user
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: id_quiz
          in: path
          schema:
            type: number
          required: true
        - name: id_question
          in: path
          schema:
            type: number
          required: true

      responses:
        204:
          description: success delete by id
        400:
          description: some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'


tags:
  - name: auth
    description: auth service
  - name: user
    description: user service
  - name: quiz
    description: quiz service
  - name: question
    description: question service

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
  schemas:
    QuestionChooseVariable:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
    QuestionType:
      type: string
      enum: [choose_one, choose_many, input]
    QuestionData:
      oneOf:
        - type: object
          description: choose_one
          properties:
            title:
              type: string
            description:
              type: string
            answer_id:
              type: number
            variables:
              type: array
              items:
                $ref: '#/components/schemas/QuestionChooseVariable'
        - type: object
          description: choose_many
          properties:
            title:
              type: string
            description:
              type: string
            answer_id:
              type: array
              items:
                type: number
            variables:
              type: array
              items:
                $ref: '#/components/schemas/QuestionChooseVariable'
    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
        id_user_owner:
          type: number
        id_quiz_owner:
          type: number
        title:
          type: string
        type:
          $ref: '#/components/schemas/QuestionType'
        data:
          $ref: '#/components/schemas/QuestionData'
        date_modify:
          type: string
          format: date-time
        is_show:
          type: boolean
    Quiz:
      type: object
      properties:
        id:
          type: number
        id_owner:
          type: string
          format: uuid
        name:
          type: string
        title:
          type: string
        description:
          type: string
        intro_url:
          type: string
        date_create:
          type: string
          format: date-time
        date_modify:
          type: string
          format: date-time
        ttl:
          example: 1h10m5s
          description: time to life
          type: string
        tts:
          description: time to start
          type: string
          format: date-time
        tte:
          description: time to end
          type: string
          format: date-time
        is_show:
          type: boolean
        is_strict:
          type: boolean
        is_random:
          type: boolean
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        first_name:
          type: string
        second_name:
          type: string
        avatar_url:
          type: string
          nullable: true
        day_of_birth:
          type: string
          format: date
          nullable: true
        gender:
          type: string
          nullable: true
    error:
      type: object
      properties:
        error:
          type: string
        details:
          type: array
          items:
            type: string
        code:
          type: number

security:
  - cookieAuth: []